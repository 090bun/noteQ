# Comments are provided throughout this file to help you get started.
# If you need more help, visit the Docker Compose reference guide at
# https://docs.docker.com/go/compose-spec-reference/

# Here the instructions define your application as a service called "server".
# This service is built from the Dockerfile in the current directory.
# You can add other services your application may depend on here, such as a
# database or a cache. For examples, see the Awesome Compose repository:
# https://github.com/docker/awesome-compose


services:
  django:
    build:
      context: ./backend-django
      dockerfile: Dockerfile
    env_file: .env
    environment:
      DJANGO_SETTINGS_MODULE: myapps.settings
      DATABASE_URL: mysql://${DB_USER}:${DB_PASSWORD}@${DB_HOST}:${DB_PORT}/${DB_NAME}
    ports:
      - "80:8000"
    volumes:
      - ./backend-django:/app
    command: >
      gunicorn myapps.asgi:application
      -k uvicorn.workers.UvicornWorker
      -b 0.0.0.0:8000 -w 3 --keep-alive 5 --timeout 30 --backlog 2048
      --access-logfile - --error-logfile -
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "python - <<'PY'\nimport urllib.request,sys; urllib.request.urlopen('http://127.0.0.1:8000/healthz'); sys.exit(0)\nPY"]
      interval: 10s
      timeout: 3s
      retries: 3
      start_period: 10s

  flask:
    build:
      context: ./ml-service
      dockerfile: Dockerfile
    ports:
      - "5000:5000"
    volumes:
      - ./ml-service:/topic_apps
    working_dir: /topic_apps
    command: >
      gunicorn wsgi:app
      -k gthread -w 2 --threads 4
      -b 0.0.0.0:5000
      --keep-alive 5 --timeout 30 --backlog 1024
      --access-logfile - --error-logfile -
    restart: always
    healthcheck:
      test: ["CMD", "curl", "-fsS", "http://localhost:5000/healthz"]
      interval: 10s
      timeout: 3s
      retries: 5
      start_period: 30s
        
  web:
    build:
      context: ./frontend/my-app
      dockerfile: Dockerfile
    env_file: .env
    ports:
      - "3000:3000"
    volumes:
      - ./frontend/my-app:/app
      - /app/node_modules   # 讓容器內 node_modules 不被覆蓋
    command: ["npm","run","dev"]
    restart: always
    environment:
      NEXT_PUBLIC_API_ORIGIN: ${NEXT_PUBLIC_API_ORIGIN:-http://34.16.43.234}

# The commented out section below is an example of how to define a PostgreSQL
# database that your application can use. `depends_on` tells Docker Compose to
# start the database before your application. The `db-data` volume persists the
# database data between container restarts. The `db-password` secret is used
# to set the database password. You must create `db/password.txt` and add
# a password of your choosing to it before running `docker compose up`.
#     depends_on:
#       db:
#         condition: service_healthy
#   db:
#     image: postgres
#     restart: always
#     user: postgres
#     secrets:
#       - db-password
#     volumes:
#       - db-data:/var/lib/postgresql/data
#     environment:
#       - POSTGRES_DB=example
#       - POSTGRES_PASSWORD_FILE=/run/secrets/db-password
#     expose:
#       - 5432
#     healthcheck:
#       test: [ "CMD", "pg_isready" ]
#       interval: 10s
#       timeout: 5s
#       retries: 5
# volumes:
#   db-data:
# secrets:
#   db-password:
#     file: db/password.txt

